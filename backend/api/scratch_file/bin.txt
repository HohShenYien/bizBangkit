token = jwt.encode({'user': auth.username,
                                'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=60)},
                               app.config['SECRET_KEY'])

C:\Users\rosss\Postman/files : valid directory to upload pictures

if 'file' not in request.files:  # check if the POST request has the file part
    path = r'\pictures\defaultpic.png'
    cur.execute("UPDATE USER_T SET user_fpath_profilepic = ? WHERE user_authkey = ?", (path, authkey,))
    con.commit()
    return jsonify({"Profile picture directory": path})

        p = update['profile_pic']
        path = r'C:\Users\rosss\OneDrive\Documents\GitHub\bizBangkit\backend\pictures'
        path1 = path + '\\' + p

        else:  # If profile picture is NOT uploaded
            path1 = r'\pictures\defaultpic.png'
            authkey = ''.join(secrets.choice(letter + digit) for x in range(length))
            cur.execute("""INSERT INTO USER_T (user_id, user_fullname, user_ic_no, user_username, user_password,
            user_authkey, user_dob, user_phone, user_email, user_gender, user_created_at, user_tos_status,
            user_fpath_profilepic)
            VALUES ( (SELECT max(user_id) FROM USER_T)+1, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'A', ?)""",
                        (user['fullname'], user['ic_number'], user['username'], user['password'], authkey, user['dob'],
                         user['phone_num'], user['email'], user['gender'], currentDateTime, path1,))
            con.commit()

            find = cur.execute("SELECT user_id FROM USER_T WHERE user_authkey = ?", (authkey,))
            for i in find:
                user_id = i[0]

clash of PUT request in update image with POST request in upload image; resulting in NULL value of the image in db

INSERT INTO FORUM_POST_T(forum_post_id, forum_post_title, forum_post_content, forum_post_datetime, forum_post_status,
                 forum_post_tos_flag, forum_post_total_point, forum_post_minuspoint, user_id)
    VALUES( < generated >, < from_request >, < from_request >, < use
    time / datetime >, < not sure >, 0, 0,
    < user_id >)

def token_required(f):
    # to decorate the inner function by configuring the to-be-decorated function.
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.args.get('token')  # http://127.0.0.1:5000/route?token=alshfjfjdklsfj89549834ur

        if not token:
            return jsonify({'message': 'Token is missing!'}), 401

        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
        except ValueError:
            return jsonify({'message': 'Token is invalid!'}), 401

        return f(*args, **kwargs)

    return decorated

print(currentDate)
print(currentDateTime.strftime("%Y-%m-%d"))